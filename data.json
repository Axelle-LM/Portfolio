{
    "escape-game": {
        "name": "Escape Game",
        "img_background": "/img/testing.jpg",
        "contexte": "Dans le cadre de la célébration des 30 ans de la formation à Champs-sur-Marne, un escape game thématique a été organisé. Cet événement s'est articulé autour de diverses temporalités, et notre groupe a choisi de travailler sur les années 1990, avec pour thème les théories du complot. L'objectif de notre projet était de trouver, parmi une série de théories du complot, celle qui s'avérait correcte. Ce projet a été réalisé en groupe de 5 personnes, composé de 3 camarades du parcours création et de 2 camarades du parcours développement, dont moi-même. Ensemble, nous devions concevoir un dispositif interactif qui s'intégrerait à l'escape game.",
        "presentation": "Pour ce projet, nous avons décidé de concevoir un petit jeu vidéo interactif sous Unity qui servirait d'outil pour les participants à l'escape game afin de récolter des indices nécessaires à la résolution de l'enquête. Le jeu se déroulait dans un environnement en 3D où les joueurs pouvaient explorer, combattre des ennemis et collecter des indices menant à la résolution du mystère. Les participants devaient analyser les théories du complot pour identifier la bonne parmi une multitude d'indices disséminés dans le jeu.",
        "role": "Dans ce projet, mon rôle principal a été de m'occuper des ennemis et de plusieurs systèmes clés du jeu. Plus précisément, je me suis chargé de :<br>- Les ennemis : J'ai développé l'IA des ennemis, incluant leurs déplacements, leur comportement en combat, et leurs tirs. J'ai également implémenté le système de spawn des ennemis à divers endroits de la carte.<br>- Système de vie : J'ai géré le système de points de vie du personnage principal ainsi que celui des ennemis. Ce système permettait au joueur et aux ennemis de perdre de la vie lors des combats et de mourir en fonction de leurs points de vie restants.<br>- Système de drop d'indices et inventaire : Lorsque les ennemis étaient vaincus, ils laissaient tomber des indices que le joueur pouvait collecter. J'ai également conçu un système d'inventaire permettant au joueur de stocker et consulter les indices récoltés pour les analyser et progresser dans l'enquête.",
        "technologie": "Unity : Le moteur de jeu Unity a été utilisé pour créer l'intégralité du jeu, avec une gestion des assets 3D, des animations, et des interactions en temps réel.<br>C# : Langage de programmation utilisé dans Unity pour écrire les scripts permettant de gérer les comportements des personnages, les mécaniques de tir, le système de vie, les ennemis et les indices.<br>Blender : Certains membres du parcours création ont utilisé Blender pour modéliser les objets 3D et les éléments du décor dans le jeu.<br>Git : Pour gérer la collaboration et le versionnement du code en équipe, permettant une intégration fluide des différentes fonctionnalités du jeu."
    },
    "combat-personnage": {
        "name": "Combat personnage",
        "img_background": "/img/poo-fond.png",
        "contexte": "Dans le cadre de mes études, j'ai entrepris un projet visant à améliorer mes compétences en développement web en me concentrant sur l'apprentissage de PHP orienté objet (POO). L'objectif principal du projet était de créer une application simple mais fonctionnelle qui simule des combats entre personnages. Ce projet s'inscrit dans une démarche d'apprentissage, tout en répondant aux critères académiques demandés pour le cours de programmation.",
        "presentation": "Le projet permet à l'utilisateur de créer, modifier, et supprimer des personnages. Chaque personnage possède des statistiques telles que la force, la défense, la santé et l'agilité, qui influencent le déroulement des combats. Le système de bataille est automatisé et permet de simuler un affrontement entre deux personnages. À la fin de la bataille, l'application détermine un vainqueur en fonction des statistiques et des actions entreprises au cours du combat. L'utilisateur peut ensuite continuer à améliorer ses personnages ou en créer de nouveaux pour tester différentes stratégies.",
        "technologie": "PHP (Programmation orientée objet) : PHP est utilisé pour gérer toute la logique métier du projet, notamment la création des classes et des méthodes permettant de gérer les personnages et les batailles. HTML/CSS : Pour l'interface utilisateur, afin de permettre une interaction basique avec l'application via le navigateur. MySQL : La base de données permet de stocker les personnages et leurs statistiques, ainsi que l'historique des combats. XAMPP (serveur local) : Utilisé pour héberger l'application en local pendant le développement et les tests. Ce projet m'a permis de mettre en pratique les concepts de la POO, tout en renforçant ma maîtrise de PHP et de la gestion des interactions entre une application web et une base de données."
    },
    "pendu": {
        "name": "Jeu du pendu",
        "img_background": "/img/pendu-fond.png",
        "contexte": "Dans le cadre de mon initiation à React.js, j'ai réalisé un projet visant à recréer un jeu classique : le jeu du pendu. Ce projet m'a permis de me familiariser avec les concepts fondamentaux de React, notamment la gestion de l'état, les composants, et les effets de cycle de vie. Initialement, l'application récupérait un mot aléatoire via une API, mais celle-ci n'étant plus disponible, j'ai dû ajuster le projet en intégrant manuellement une sélection de mots. L'objectif du jeu reste le même : deviner le mot sans commettre trop d'erreurs, sous peine de perdre la partie.",
        "presentation": "Le jeu du pendu que j'ai développé permet à l'utilisateur de deviner un mot caché, lettre par lettre, en essayant de minimiser le nombre d'erreurs. À chaque mauvaise réponse, une partie du pendu apparaît, et si le nombre d'erreurs atteint une limite prédéfinie, le joueur perd la partie. Le mot à deviner est sélectionné aléatoirement parmi une liste prédéfinie que j'ai intégrée directement dans le code suite à l'indisponibilité de l'API précédente.",
        "technologie": "React.js : Ce projet a été entièrement développé en React.js, permettant de diviser l'application en composants réutilisables et de gérer l'état des lettres devinées, des erreurs, et de la progression du jeu. L'utilisation de hooks comme useState et useEffect a facilité la gestion de l'état et la mise à jour de l'interface en fonction des actions du joueur. CSS : Pour styliser l'interface du jeu et rendre l'expérience utilisateur agréable et visuellement intuitive. API : Bien que l'API initialement prévue ne soit plus disponible, le projet conserve une architecture qui pourrait s'adapter à n'importe quelle source de mots, ce qui permettrait de facilement réintégrer une nouvelle API de génération de mots à l'avenir."
    },
    "visualisation-sonore": {
        "name": "Visualisation sonore",
        "img_background": "/img/audio-fond.png",
        "contexte": "Dans le cadre de mes études, j'ai réalisé un projet en cours dont l'objectif était d'explorer les technologies modernes de développement web tout en mettant l'accent sur la visualisation sonore. Le projet consistait à créer une application interactive capable de réagir à une musique choisie par l'utilisateur en générant des animations 3D basées sur cette musique. Ce travail m'a permis d'approfondir mes connaissances en JavaScript, en particulier dans l'utilisation de bibliothèques spécialisées comme React.js et Three.js pour la création d'expériences visuelles et interactives.",
        "presentation": "Le projet permet à l'utilisateur de sélectionner une musique de son choix à partir de son appareil. Une fois la musique choisie, l'utilisateur peut également sélectionner une forme géométrique parmi celles disponibles (sphère, cube, etc.). À partir de là, la forme commence à réagir en temps réel aux fréquences de la musique en bougeant et en changeant de manière dynamique selon les variations du son. L'application offre ainsi une expérience visuelle unique et immersive, où la géométrie et les animations évoluent en fonction des caractéristiques de la piste audio.",
        "technologie": "React.js : Le framework JavaScript React.js a été utilisé pour gérer l'interface utilisateur et faciliter la gestion de l'état de l'application. Grâce à React, il est plus simple de manipuler les composants de l'interface, comme la sélection de la musique et des formes, tout en assurant une fluidité dans l'expérience utilisateur. Three.js : La bibliothèque Three.js a permis de générer et d'animer les éléments 3D. Elle a été utilisée pour créer les formes géométriques et leur appliquer des transformations basées sur les données sonores. JavaScript (ES6) : JavaScript a été utilisé en complément pour le traitement des événements, l'analyse des données sonores et la gestion des interactions utilisateur. HTML/CSS : Pour la structure de la page et le stylisme de l'interface."
    },
    "expo": {}
}